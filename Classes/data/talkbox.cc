// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/talkbox.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "data/talkbox.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace talkbox {

namespace {

const ::google::protobuf::Descriptor* talk_result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_result_reflection_ = NULL;
const ::google::protobuf::Descriptor* talk_create_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_create_reflection_ = NULL;
const ::google::protobuf::Descriptor* talk_users_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_users_reflection_ = NULL;
const ::google::protobuf::Descriptor* talk_users_talk_user_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_users_talk_user_reflection_ = NULL;
const ::google::protobuf::Descriptor* talk_message_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  talk_message_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_data_2ftalkbox_2eproto() {
  protobuf_AddDesc_data_2ftalkbox_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "data/talkbox.proto");
  GOOGLE_CHECK(file != NULL);
  talk_result_descriptor_ = file->message_type(0);
  static const int talk_result_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_result, id_),
  };
  talk_result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_result_descriptor_,
      talk_result::default_instance_,
      talk_result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_result));
  talk_create_descriptor_ = file->message_type(1);
  static const int talk_create_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_create, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_create, name_),
  };
  talk_create_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_create_descriptor_,
      talk_create::default_instance_,
      talk_create_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_create, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_create, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_create));
  talk_users_descriptor_ = file->message_type(2);
  static const int talk_users_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users, users_),
  };
  talk_users_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_users_descriptor_,
      talk_users::default_instance_,
      talk_users_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_users));
  talk_users_talk_user_descriptor_ = talk_users_descriptor_->nested_type(0);
  static const int talk_users_talk_user_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users_talk_user, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users_talk_user, name_),
  };
  talk_users_talk_user_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_users_talk_user_descriptor_,
      talk_users_talk_user::default_instance_,
      talk_users_talk_user_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users_talk_user, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_users_talk_user, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_users_talk_user));
  talk_message_descriptor_ = file->message_type(3);
  static const int talk_message_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_message, fromuserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_message, touserid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_message, msg_),
  };
  talk_message_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      talk_message_descriptor_,
      talk_message::default_instance_,
      talk_message_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_message, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(talk_message, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(talk_message));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_data_2ftalkbox_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_result_descriptor_, &talk_result::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_create_descriptor_, &talk_create::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_users_descriptor_, &talk_users::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_users_talk_user_descriptor_, &talk_users_talk_user::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    talk_message_descriptor_, &talk_message::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_data_2ftalkbox_2eproto() {
  delete talk_result::default_instance_;
  delete talk_result_reflection_;
  delete talk_create::default_instance_;
  delete talk_create_reflection_;
  delete talk_users::default_instance_;
  delete talk_users_reflection_;
  delete talk_users_talk_user::default_instance_;
  delete talk_users_talk_user_reflection_;
  delete talk_message::default_instance_;
  delete talk_message_reflection_;
}

void protobuf_AddDesc_data_2ftalkbox_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022data/talkbox.proto\022\007talkbox\"\031\n\013talk_re"
    "sult\022\n\n\002id\030\001 \002(\005\"+\n\013talk_create\022\016\n\006useri"
    "d\030\001 \002(\005\022\014\n\004name\030\002 \002(\t\"e\n\ntalk_users\022,\n\005u"
    "sers\030\001 \003(\0132\035.talkbox.talk_users.talk_use"
    "r\032)\n\ttalk_user\022\016\n\006userid\030\001 \002(\005\022\014\n\004name\030\002"
    " \002(\t\"A\n\014talk_message\022\022\n\nfromuserid\030\001 \002(\005"
    "\022\020\n\010touserid\030\002 \002(\005\022\013\n\003msg\030\003 \002(\t", 271);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "data/talkbox.proto", &protobuf_RegisterTypes);
  talk_result::default_instance_ = new talk_result();
  talk_create::default_instance_ = new talk_create();
  talk_users::default_instance_ = new talk_users();
  talk_users_talk_user::default_instance_ = new talk_users_talk_user();
  talk_message::default_instance_ = new talk_message();
  talk_result::default_instance_->InitAsDefaultInstance();
  talk_create::default_instance_->InitAsDefaultInstance();
  talk_users::default_instance_->InitAsDefaultInstance();
  talk_users_talk_user::default_instance_->InitAsDefaultInstance();
  talk_message::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_data_2ftalkbox_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_data_2ftalkbox_2eproto {
  StaticDescriptorInitializer_data_2ftalkbox_2eproto() {
    protobuf_AddDesc_data_2ftalkbox_2eproto();
  }
} static_descriptor_initializer_data_2ftalkbox_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int talk_result::kIdFieldNumber;
#endif  // !_MSC_VER

talk_result::talk_result()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_result::InitAsDefaultInstance() {
}

talk_result::talk_result(const talk_result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_result::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_result::~talk_result() {
  SharedDtor();
}

void talk_result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talk_result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_result_descriptor_;
}

const talk_result& talk_result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftalkbox_2eproto();
  return *default_instance_;
}

talk_result* talk_result::default_instance_ = NULL;

talk_result* talk_result::New() const {
  return new talk_result;
}

void talk_result::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_result::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_result::MergeFrom(const talk_result& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_result::CopyFrom(const talk_result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_result::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void talk_result::Swap(talk_result* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_result_descriptor_;
  metadata.reflection = talk_result_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talk_create::kUseridFieldNumber;
const int talk_create::kNameFieldNumber;
#endif  // !_MSC_VER

talk_create::talk_create()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_create::InitAsDefaultInstance() {
}

talk_create::talk_create(const talk_create& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_create::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_create::~talk_create() {
  SharedDtor();
}

void talk_create::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void talk_create::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_create::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_create_descriptor_;
}

const talk_create& talk_create::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftalkbox_2eproto();
  return *default_instance_;
}

talk_create* talk_create::default_instance_ = NULL;

talk_create* talk_create::New() const {
  return new talk_create;
}

void talk_create::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_create::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_create::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_create::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_create::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_create::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_create* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_create*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_create::MergeFrom(const talk_create& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_create::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_create::CopyFrom(const talk_create& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_create::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void talk_create::Swap(talk_create* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_create::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_create_descriptor_;
  metadata.reflection = talk_create_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talk_users_talk_user::kUseridFieldNumber;
const int talk_users_talk_user::kNameFieldNumber;
#endif  // !_MSC_VER

talk_users_talk_user::talk_users_talk_user()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_users_talk_user::InitAsDefaultInstance() {
}

talk_users_talk_user::talk_users_talk_user(const talk_users_talk_user& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_users_talk_user::SharedCtor() {
  _cached_size_ = 0;
  userid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_users_talk_user::~talk_users_talk_user() {
  SharedDtor();
}

void talk_users_talk_user::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void talk_users_talk_user::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_users_talk_user::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_users_talk_user_descriptor_;
}

const talk_users_talk_user& talk_users_talk_user::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftalkbox_2eproto();
  return *default_instance_;
}

talk_users_talk_user* talk_users_talk_user::default_instance_ = NULL;

talk_users_talk_user* talk_users_talk_user::New() const {
  return new talk_users_talk_user;
}

void talk_users_talk_user::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    userid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_users_talk_user::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 userid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_users_talk_user::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 userid = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->userid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_users_talk_user::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 userid = 1;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->userid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_users_talk_user::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 userid = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_users_talk_user::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_users_talk_user* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_users_talk_user*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_users_talk_user::MergeFrom(const talk_users_talk_user& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_users_talk_user::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_users_talk_user::CopyFrom(const talk_users_talk_user& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_users_talk_user::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void talk_users_talk_user::Swap(talk_users_talk_user* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_users_talk_user::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_users_talk_user_descriptor_;
  metadata.reflection = talk_users_talk_user_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int talk_users::kUsersFieldNumber;
#endif  // !_MSC_VER

talk_users::talk_users()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_users::InitAsDefaultInstance() {
}

talk_users::talk_users(const talk_users& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_users::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_users::~talk_users() {
  SharedDtor();
}

void talk_users::SharedDtor() {
  if (this != default_instance_) {
  }
}

void talk_users::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_users::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_users_descriptor_;
}

const talk_users& talk_users::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftalkbox_2eproto();
  return *default_instance_;
}

talk_users* talk_users::default_instance_ = NULL;

talk_users* talk_users::New() const {
  return new talk_users;
}

void talk_users::Clear() {
  users_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_users::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .talkbox.talk_users.talk_user users = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_users:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_users()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_users;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_users::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .talkbox.talk_users.talk_user users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->users(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_users::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .talkbox.talk_users.talk_user users = 1;
  for (int i = 0; i < this->users_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->users(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_users::ByteSize() const {
  int total_size = 0;

  // repeated .talkbox.talk_users.talk_user users = 1;
  total_size += 1 * this->users_size();
  for (int i = 0; i < this->users_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->users(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_users::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_users* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_users*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_users::MergeFrom(const talk_users& from) {
  GOOGLE_CHECK_NE(&from, this);
  users_.MergeFrom(from.users_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_users::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_users::CopyFrom(const talk_users& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_users::IsInitialized() const {

  for (int i = 0; i < users_size(); i++) {
    if (!this->users(i).IsInitialized()) return false;
  }
  return true;
}

void talk_users::Swap(talk_users* other) {
  if (other != this) {
    users_.Swap(&other->users_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_users::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_users_descriptor_;
  metadata.reflection = talk_users_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int talk_message::kFromuseridFieldNumber;
const int talk_message::kTouseridFieldNumber;
const int talk_message::kMsgFieldNumber;
#endif  // !_MSC_VER

talk_message::talk_message()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void talk_message::InitAsDefaultInstance() {
}

talk_message::talk_message(const talk_message& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void talk_message::SharedCtor() {
  _cached_size_ = 0;
  fromuserid_ = 0;
  touserid_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

talk_message::~talk_message() {
  SharedDtor();
}

void talk_message::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void talk_message::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* talk_message::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return talk_message_descriptor_;
}

const talk_message& talk_message::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_data_2ftalkbox_2eproto();
  return *default_instance_;
}

talk_message* talk_message::default_instance_ = NULL;

talk_message* talk_message::New() const {
  return new talk_message;
}

void talk_message::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fromuserid_ = 0;
    touserid_ = 0;
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool talk_message::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fromuserid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fromuserid_)));
          set_has_fromuserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_touserid;
        break;
      }

      // required int32 touserid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_touserid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &touserid_)));
          set_has_touserid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_msg;
        break;
      }

      // required string msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void talk_message::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fromuserid = 1;
  if (has_fromuserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fromuserid(), output);
  }

  // required int32 touserid = 2;
  if (has_touserid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->touserid(), output);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* talk_message::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fromuserid = 1;
  if (has_fromuserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fromuserid(), target);
  }

  // required int32 touserid = 2;
  if (has_touserid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->touserid(), target);
  }

  // required string msg = 3;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int talk_message::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fromuserid = 1;
    if (has_fromuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fromuserid());
    }

    // required int32 touserid = 2;
    if (has_touserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->touserid());
    }

    // required string msg = 3;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void talk_message::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const talk_message* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const talk_message*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void talk_message::MergeFrom(const talk_message& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fromuserid()) {
      set_fromuserid(from.fromuserid());
    }
    if (from.has_touserid()) {
      set_touserid(from.touserid());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void talk_message::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void talk_message::CopyFrom(const talk_message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool talk_message::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void talk_message::Swap(talk_message* other) {
  if (other != this) {
    std::swap(fromuserid_, other->fromuserid_);
    std::swap(touserid_, other->touserid_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata talk_message::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = talk_message_descriptor_;
  metadata.reflection = talk_message_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace talkbox

// @@protoc_insertion_point(global_scope)
