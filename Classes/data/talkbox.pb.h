// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data/talkbox.proto

#ifndef PROTOBUF_data_2ftalkbox_2eproto__INCLUDED
#define PROTOBUF_data_2ftalkbox_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace talkbox {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_data_2ftalkbox_2eproto();
void protobuf_AssignDesc_data_2ftalkbox_2eproto();
void protobuf_ShutdownFile_data_2ftalkbox_2eproto();

class talk_result;
class talk_create;
class talk_users;
class talk_users_talk_user;
class talk_message;

// ===================================================================

class talk_result : public ::google::protobuf::Message {
 public:
  talk_result();
  virtual ~talk_result();

  talk_result(const talk_result& from);

  inline talk_result& operator=(const talk_result& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_result& default_instance();

  void Swap(talk_result* other);

  // implements Message ----------------------------------------------

  talk_result* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talk_result& from);
  void MergeFrom(const talk_result& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:talkbox.talk_result)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_2ftalkbox_2eproto();
  friend void protobuf_AssignDesc_data_2ftalkbox_2eproto();
  friend void protobuf_ShutdownFile_data_2ftalkbox_2eproto();

  void InitAsDefaultInstance();
  static talk_result* default_instance_;
};
// -------------------------------------------------------------------

class talk_create : public ::google::protobuf::Message {
 public:
  talk_create();
  virtual ~talk_create();

  talk_create(const talk_create& from);

  inline talk_create& operator=(const talk_create& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_create& default_instance();

  void Swap(talk_create* other);

  // implements Message ----------------------------------------------

  talk_create* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talk_create& from);
  void MergeFrom(const talk_create& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:talkbox.talk_create)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_2ftalkbox_2eproto();
  friend void protobuf_AssignDesc_data_2ftalkbox_2eproto();
  friend void protobuf_ShutdownFile_data_2ftalkbox_2eproto();

  void InitAsDefaultInstance();
  static talk_create* default_instance_;
};
// -------------------------------------------------------------------

class talk_users_talk_user : public ::google::protobuf::Message {
 public:
  talk_users_talk_user();
  virtual ~talk_users_talk_user();

  talk_users_talk_user(const talk_users_talk_user& from);

  inline talk_users_talk_user& operator=(const talk_users_talk_user& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_users_talk_user& default_instance();

  void Swap(talk_users_talk_user* other);

  // implements Message ----------------------------------------------

  talk_users_talk_user* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talk_users_talk_user& from);
  void MergeFrom(const talk_users_talk_user& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 userid = 1;
  inline bool has_userid() const;
  inline void clear_userid();
  static const int kUseridFieldNumber = 1;
  inline ::google::protobuf::int32 userid() const;
  inline void set_userid(::google::protobuf::int32 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:talkbox.talk_users.talk_user)
 private:
  inline void set_has_userid();
  inline void clear_has_userid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 userid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_data_2ftalkbox_2eproto();
  friend void protobuf_AssignDesc_data_2ftalkbox_2eproto();
  friend void protobuf_ShutdownFile_data_2ftalkbox_2eproto();

  void InitAsDefaultInstance();
  static talk_users_talk_user* default_instance_;
};
// -------------------------------------------------------------------

class talk_users : public ::google::protobuf::Message {
 public:
  talk_users();
  virtual ~talk_users();

  talk_users(const talk_users& from);

  inline talk_users& operator=(const talk_users& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_users& default_instance();

  void Swap(talk_users* other);

  // implements Message ----------------------------------------------

  talk_users* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talk_users& from);
  void MergeFrom(const talk_users& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef talk_users_talk_user talk_user;

  // accessors -------------------------------------------------------

  // repeated .talkbox.talk_users.talk_user users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::talkbox::talk_users_talk_user& users(int index) const;
  inline ::talkbox::talk_users_talk_user* mutable_users(int index);
  inline ::talkbox::talk_users_talk_user* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >*
      mutable_users();

  // @@protoc_insertion_point(class_scope:talkbox.talk_users)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user > users_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_data_2ftalkbox_2eproto();
  friend void protobuf_AssignDesc_data_2ftalkbox_2eproto();
  friend void protobuf_ShutdownFile_data_2ftalkbox_2eproto();

  void InitAsDefaultInstance();
  static talk_users* default_instance_;
};
// -------------------------------------------------------------------

class talk_message : public ::google::protobuf::Message {
 public:
  talk_message();
  virtual ~talk_message();

  talk_message(const talk_message& from);

  inline talk_message& operator=(const talk_message& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const talk_message& default_instance();

  void Swap(talk_message* other);

  // implements Message ----------------------------------------------

  talk_message* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const talk_message& from);
  void MergeFrom(const talk_message& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fromuserid = 1;
  inline bool has_fromuserid() const;
  inline void clear_fromuserid();
  static const int kFromuseridFieldNumber = 1;
  inline ::google::protobuf::int32 fromuserid() const;
  inline void set_fromuserid(::google::protobuf::int32 value);

  // required int32 touserid = 2;
  inline bool has_touserid() const;
  inline void clear_touserid();
  static const int kTouseridFieldNumber = 2;
  inline ::google::protobuf::int32 touserid() const;
  inline void set_touserid(::google::protobuf::int32 value);

  // required string msg = 3;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 3;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // @@protoc_insertion_point(class_scope:talkbox.talk_message)
 private:
  inline void set_has_fromuserid();
  inline void clear_has_fromuserid();
  inline void set_has_touserid();
  inline void clear_has_touserid();
  inline void set_has_msg();
  inline void clear_has_msg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fromuserid_;
  ::google::protobuf::int32 touserid_;
  ::std::string* msg_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_data_2ftalkbox_2eproto();
  friend void protobuf_AssignDesc_data_2ftalkbox_2eproto();
  friend void protobuf_ShutdownFile_data_2ftalkbox_2eproto();

  void InitAsDefaultInstance();
  static talk_message* default_instance_;
};
// ===================================================================


// ===================================================================

// talk_result

// required int32 id = 1;
inline bool talk_result::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_result::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_result::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_result::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 talk_result::id() const {
  return id_;
}
inline void talk_result::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// talk_create

// required int32 userid = 1;
inline bool talk_create::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_create::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_create::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_create::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 talk_create::userid() const {
  return userid_;
}
inline void talk_create::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required string name = 2;
inline bool talk_create::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talk_create::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talk_create::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talk_create::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& talk_create::name() const {
  return *name_;
}
inline void talk_create::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void talk_create::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void talk_create::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* talk_create::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* talk_create::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void talk_create::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// talk_users_talk_user

// required int32 userid = 1;
inline bool talk_users_talk_user::has_userid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_users_talk_user::set_has_userid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_users_talk_user::clear_has_userid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_users_talk_user::clear_userid() {
  userid_ = 0;
  clear_has_userid();
}
inline ::google::protobuf::int32 talk_users_talk_user::userid() const {
  return userid_;
}
inline void talk_users_talk_user::set_userid(::google::protobuf::int32 value) {
  set_has_userid();
  userid_ = value;
}

// required string name = 2;
inline bool talk_users_talk_user::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talk_users_talk_user::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talk_users_talk_user::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talk_users_talk_user::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& talk_users_talk_user::name() const {
  return *name_;
}
inline void talk_users_talk_user::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void talk_users_talk_user::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void talk_users_talk_user::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* talk_users_talk_user::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* talk_users_talk_user::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void talk_users_talk_user::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// talk_users

// repeated .talkbox.talk_users.talk_user users = 1;
inline int talk_users::users_size() const {
  return users_.size();
}
inline void talk_users::clear_users() {
  users_.Clear();
}
inline const ::talkbox::talk_users_talk_user& talk_users::users(int index) const {
  return users_.Get(index);
}
inline ::talkbox::talk_users_talk_user* talk_users::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::talkbox::talk_users_talk_user* talk_users::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >&
talk_users::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::talkbox::talk_users_talk_user >*
talk_users::mutable_users() {
  return &users_;
}

// -------------------------------------------------------------------

// talk_message

// required int32 fromuserid = 1;
inline bool talk_message::has_fromuserid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void talk_message::set_has_fromuserid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void talk_message::clear_has_fromuserid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void talk_message::clear_fromuserid() {
  fromuserid_ = 0;
  clear_has_fromuserid();
}
inline ::google::protobuf::int32 talk_message::fromuserid() const {
  return fromuserid_;
}
inline void talk_message::set_fromuserid(::google::protobuf::int32 value) {
  set_has_fromuserid();
  fromuserid_ = value;
}

// required int32 touserid = 2;
inline bool talk_message::has_touserid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void talk_message::set_has_touserid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void talk_message::clear_has_touserid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void talk_message::clear_touserid() {
  touserid_ = 0;
  clear_has_touserid();
}
inline ::google::protobuf::int32 talk_message::touserid() const {
  return touserid_;
}
inline void talk_message::set_touserid(::google::protobuf::int32 value) {
  set_has_touserid();
  touserid_ = value;
}

// required string msg = 3;
inline bool talk_message::has_msg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void talk_message::set_has_msg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void talk_message::clear_has_msg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void talk_message::clear_msg() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& talk_message::msg() const {
  return *msg_;
}
inline void talk_message::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void talk_message::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
}
inline void talk_message::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* talk_message::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    msg_ = new ::std::string;
  }
  return msg_;
}
inline ::std::string* talk_message::release_msg() {
  clear_has_msg();
  if (msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void talk_message::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace talkbox

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_data_2ftalkbox_2eproto__INCLUDED
